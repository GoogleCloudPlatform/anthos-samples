#!/bin/bash

# NOTE: gcloud compute config-ssh and gcloud compute config-ssh --remove work to add/remove from local caller, but requires full hostname, gcp_compute plugin only uses name

# This file is used to assist and encapsulate re-usable functions

# Default to "n1-standard-16" ## "n2-standard-16" n2-standard-8 -- # n2-custom (6 vCPUs, 21.25 GB memory) recommended
export MACHINE_SIZE=${MACHINE_SIZE:-"n1-standard-16"}
export NETWORK="default"

export GCE_NAME_PREFIX="cnuc-"
export ANSIBLE_USER="abm-admin" # user on remote box that will be the ansible user (will be in sudoer)
export PROVISION_KEY_PUB_KEY="install-pub-key" # Used in gce-init.sh to pull .pub key
export PREEMPTIBLE_OPTION=${PREEMPTIBLE_OPTION:-""} # Default to empty, but if script ran with -p, the incoming variable will be preset

# GCE Init Script
export SETUP_VXLAN_SCRIPT="/var/setup-vxlan.sh"
export SYSTEM_SERVICE_NAME="setup-vxlan.service"
export SYSTEM_SERVICE_VXLAN="/etc/systemd/system/${SYSTEM_SERVICE_NAME}"

# GCS Bucket for startup script
export BUCKET_NAME="abm-edge-boot-${PROJECT_ID}"

# Can override if set an environment variable VXLAN_ID
VXLAN_ID=${VXLAN_ID:-40}

REQUIRED_CLUSTER_SIZE=3

# These are network tags set on select VMs in the clusters. Then we set up
# firewall rules to allow traffic to PODs through VMs that only have these tags
INGRESS_NETWORK_TAG="public-ingress"
EGRESS_NETWORK_TAG="public-egress"

# Default SSH key location if not set
if [[ -z "$SSH_PUB_KEY_LOCATION" ]]; then
  export SSH_PUB_KEY_LOCATION="${HOME}/.ssh/cnucs-cloud.pub"
fi

if [[ -z "${PROXY_PORT}" ]]; then
  echo "Environment variable 'PROXY_PORT' is not set. Using default 8080."
  PROXY_PORT="8080"
fi

###
###  Create storage bucket for Init Script
###
function setup_init_bucket() {
    local BUCKET=${1-$BUCKET_NAME}
    local PROJECT=${2-$PROJECT_ID}
    gsutil -q stat gs://${BUCKET}/.dontremove 2> /dev/null
    if [[ $? > 0 ]]; then
        echo "Bucket does not exist, creating gs://${BUCKET}"
        gsutil mb -p ${PROJECT} gs://${BUCKET}
        if [[ $? > 0 ]]; then
            echo "Error: Cannot create bucket ${BUCKET} in ${PROJECT}"
            exit 1
        fi
        # Add file for flag that bucket is available
        echo "do not remove this file" | gsutil cp - gs://$BUCKET_NAME/.dontremove
    fi
}


###
### Copy init script to bucket with variable replaced
###
function copy_init_script() {
    if [[ -z "${PREFIX_DIR}" ]]; then
      echo "Error: PREFIX_DIR is not set in gce-helper.vars."
      exit 1
    fi

    # Only substitute the following variables
    envsubst \${ANSIBLE_USER},\${PROVISION_KEY_PUB_KEY},\${SETUP_VXLAN_SCRIPT},\${SYSTEM_SERVICE_VXLAN},\${SYSTEM_SERVICE_NAME} < ${PREFIX_DIR}/gce-init.sh > ${PREFIX_DIR}/gce-init-copy.sh
    gsutil cp ${PREFIX_DIR}/gce-init-copy.sh gs://${BUCKET_NAME}/gce-init.sh
    rm -rf ${PREFIX_DIR}/gce-init-copy.sh
}

###
### Create a secret and version; if secret already exists, adds a version. Idempotent(ish)
###
function create_secret() {
    KEY="$1"
    VALUE="$2"
    FILE="${3-false}"
    PROJECT="${4-$PROJECT_ID}"
    EXISTS=$(gcloud secrets describe "${KEY}" --project "${PROJECT}" 2> /dev/null)
    if [[ $? > 0 ]]; then
        gcloud secrets create ${KEY} --replication-policy="automatic" --project=${PROJECT}
    fi
    EXISTS=$(gcloud secrets -q versions access latest --format="value(name)" --secret="${KEY}" --project ${PROJECT} 2> /dev/null)
    if [[ -z "${EXISTS}" ]]; then
    # Only create a new version IF there is no versions (for now) #TODO: Create a variable to override and force create a new secret version
        if [[ "$FILE" == "false" ]]; then
            # Standard Input
            echo ${VALUE} | gcloud secrets versions add ${KEY} --project=${PROJECT} --data-file=-
        else
            # File reference
            gcloud secrets versions add ${KEY} --project=${PROJECT} --data-file=${VALUE}
        fi
    fi
}

###
###  Create SSH key key used in ansible provisioning (ie, the "host" box)
###
function create_ssh_key() {
    if [ ! -f "${SSH_PUB_KEY_LOCATION}" ]; then
        echo "SSH key does not exist, creating..."
        # Remove .pub from SSH_PUB_KEY_LOCATION
        key_location="${SSH_PUB_KEY_LOCATION%.pub}"
        ssh-keygen -f ${key_location} -t ed25519 -C "emulated-nucs-gce"
    fi
}

###
###  Create and/or store public key used in ansible provisioning (ie, the "host" box)
###
function store_public_key_secret() {
    # Create SSH key if it doesn't exist
    create_ssh_key

    create_secret "${PROVISION_KEY_PUB_KEY}" "${SSH_PUB_KEY_LOCATION}" "true" # create the secret from a file
}

###
### Displays the IP addresses for GCE instances matching cnuc format
###
function display_gce_vms_ips() {
    DELIM=';'
    INSTANCES=($(gcloud compute instances list --filter="labels.type=abm" --format="value[separator='${DELIM}'](name, networkInterfaces[0].accessConfigs[0].natIP)"))

    echo -e "SSH Strings\n===================\n"
    for INSTANCE in "${INSTANCES[@]}"
    do
        PARTS=(${INSTANCE//${DELIM}/ })
        echo "${PARTS[0]}: ssh -i ~/.ssh/cnucs-cloud abm-admin@${PARTS[1]} -- ssh -i ~/.ssh/cnucs-cloud abm-admin@${PARTS[0]}"
    done

    echo -e "\n/etc/hosts string\n================"
    echo ""
    ETC_HOSTS_STR=""
    for INSTANCE in "${INSTANCES[@]}"
    do
        PARTS=(${INSTANCE//${DELIM}/ })
        # echo -e "${PARTS[1]}\t\t${PARTS[0]}\n"
        ETC_HOSTS_STR="${ETC_HOSTS_STR}${PARTS[1]}\t\t${PARTS[0]}\n"
    done
    echo -e $ETC_HOSTS_STR
}

###
###  Creates 1..n GCE instances for Ansible inventory
###  Ensures SSH key copy for passwordless SSH access
function create_gce_vms() {
    i=${CLUSTER_START_INDEX}
    end=$(($1 + CLUSTER_START_INDEX))
    cluster_id=2

    # TODO: Due to quota in regions, spread out over n-cluster regions

    while [[ $i -lt ${end} ]]; do

        VM_EXISTS="$( gcloud compute instances list --filter="name=cnuc-${i}" --format="value(name)" 2>/dev/null )"
        if [ -z "${VM_EXISTS}" ]; then
            echo "Creating cnuc-${i}..."
            # TODO: Add Franchise labels to the cluster when ready
            # Output command being run
            set -x
            gcloud compute instances create ${GCE_NAME_PREFIX}${i} \
                --image-family=ubuntu-2004-lts \
                --image-project=ubuntu-os-cloud \
                --zone="${ZONE}" \
                --boot-disk-size 600G \
                --boot-disk-type pd-ssd \
		            --create-disk=mode=rw,size=250,type=projects/${PROJECT_ID}/zones/${ZONE}/diskTypes/pd-ssd,name=cnuc-disk-${i} \
                --can-ip-forward \
                --network ${NETWORK} \
                --labels="type=abm,category=edge-server,location=west,vxlanid=${VXLAN_ID}" \
                --tags http-server,https-server \
                --min-cpu-platform "Intel Haswell" \
                --scopes cloud-platform \
                --metadata "startup-script-url=gs://${BUCKET_NAME}/gce-init.sh,vxlanid=${VXLAN_ID},instance=${i},cluster_id=${cluster_id},proxy_port=${PROXY_PORT}" \
                --machine-type ${MACHINE_SIZE} \
                --project ${PROJECT_ID} ${PREEMPTIBLE_OPTION}
            # Disable outputting command being run. Use subshell to not display this command.
            { set +x; } 2>/dev/null

        else
            echo "cnuc-${i} already exists, will skip creating new VM."
        fi

        if [[ $(( i%REQUIRED_CLUSTER_SIZE )) == 0 ]]; then
            # set network-tags for the first instance in the recent cluster
            # these tags are used in the setup_proxy_firewall() function to
            # allow traffic to the pods via the first node in the cluster
            first_node=$(($i-$REQUIRED_CLUSTER_SIZE+1))
            gcloud compute instances add-tags ${GCE_NAME_PREFIX}${first_node} \
                --zone=${ZONE} \
                --tags=${INGRESS_NETWORK_TAG},${EGRESS_NETWORK_TAG}
            VXLAN_ID=$(( VXLAN_ID + 1))
            echo "Next ${REQUIRED_CLUSTER_SIZE} clusters will use VXLAN_ID=${VXLAN_ID}"
            cluster_id=2 # reset
        else
            let cluster_id=cluster_id+1
        fi

        let i=i+1

        echo -e "\n\n"
    done
    echo -e "Done creating GCE Instances"
}

function setup_ssh_firewall() {
    echo "Checking SSH firewall..."
    FIREWALL_EXISTS=$(gcloud compute firewall-rules list --filter="name=default-allow-ssh" --format="value(name)")
    if [ -z "${FIREWALL_EXISTS}" ]; then
        gcloud compute firewall-rules create --network=${NETWORK} default-allow-ssh --allow=tcp:22
    fi

    gcloud compute firewall-rules create allow-rdp \
        --direction=INGRESS \
        --priority=1000 \
        --network=${NETWORK} \
        --allow=tcp:3389 \
        --source-ranges=0.0.0.0/0 \
        --project=${PROJECT_ID}

}

# This function sets up two firewall rules (ingress & egress) allowing tcp
# traffic via port ${PROXY_PORT} to instances that have the network-tags
# {INGRESS_NETWORK_TAG} & ${EGRESS_NETWORK_TAG}. These rules are used to alow
# public access to the Kubernetes pods running inside the cluster that those
# isntances are part of
function setup_proxy_firewall() {
    FIREWALL_EXISTS=$(gcloud compute firewall-rules list --filter="name=allow-pod-ingress")
    if [ -z "${FIREWALL_EXISTS}" ]; then
        gcloud compute firewall-rules create allow-pod-ingress \
            --project=${PROJECT_ID} \
            --network=${NETWORK} \
            --direction=INGRESS \
            --allow=tcp:${PROXY_PORT} \
            --target-tags=${INGRESS_NETWORK_TAG} \
            --description="Allow incoming traffic on TCP port ${PROXY_PORT} to instances with network-tag ${INGRESS_NETWORK_TAG}"
    else
        echo "Firewall rule 'allow-pod-ingress' already exists. Skipping creation!"
    fi

    FIREWALL_EXISTS=$(gcloud compute firewall-rules list --filter="name=allow-pod-egress")
    if [ -z "${FIREWALL_EXISTS}" ]; then
        gcloud compute firewall-rules create allow-pod-egress \
            --project=${PROJECT_ID} \
            --network=${NETWORK} \
            --direction=EGRESS \
            --allow=tcp:${PROXY_PORT} \
            --target-tags=${EGRESS_NETWORK_TAG} \
            --description="Allow outgoing traffic on TCP port ${PROXY_PORT} from instances with network-tag ${EGRESS_NETWORK_TAG}"
    else
        echo "Firewall rule 'allow-pod-egress' already exists. Skipping creation!"
    fi
}
